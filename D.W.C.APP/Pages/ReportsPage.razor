@page "/reports"
@using D.W.C.Lib.D.W.C.Models
@using D.W.C.APP.Service
@using Radzen
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components

<div class="container-fluid @GetMainContentCssClass()">
    <div class="container-raports p-4">
        <div class="search-sort-criteria mb-4">
            <div class="row g-3">
                <div class="col-md-4">
                    <input type="text" id="personSearch" class="form-control" placeholder="Wyszukaj po Osobie" @bind="personCriteria" @onkeypress="CheckEnterKey" />
                </div>
                <div class="col-md-4">
                    <input type="text" id="projectSearch" class="form-control" placeholder="Wyszukaj po Projekcie" @bind="projectCriteria" @onkeypress="CheckEnterKey" />
                </div>
                <div class="col-md-4">
                    <select class="form-select" @onchange="HandleSprintChange">
                        <option value="">Wybierz Iteration Path</option>
                        @foreach (var iteration in iterationPaths)
                        {
                            <option value="@iteration">@iteration</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-8">
                <RadzenChart>
                    <RadzenCategoryAxis>
                        <RadzenAxisLabel Text="Iteration Path" />
                    </RadzenCategoryAxis>
                    <RadzenValueAxis>
                        <RadzenAxisLabel Text="Work Time (Hours)" />
                    </RadzenValueAxis>
                    <RadzenColumnSeries Data="@workTimeData" CategoryProperty="IterationPath" ValueProperty="TotalWorkTime" />
                </RadzenChart>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-12">
                <RadzenDataGrid @ref="dataGrid" Data="@filteredTasks" TItem="WorkItemDetails" RowSelect="OnRowSelect" AllowFiltering="true" AllowPaging="true" PageSize="12">
                    <Columns>
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="Id" Title="ID Zadania" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="DisplayName" Title="Osoba przypisana" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="AreaPath" Title="Projekt" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="Title" Title="Tytuł" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="ActivatedDate" Title="Data Rozpoczęcia" FormatString="{0:yyyy-MM-dd}" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="ResolvedDate" Title="Data Zakończenia" FormatString="{0:yyyy-MM-dd}" />
                        <RadzenDataGridColumn TItem="WorkItemDetails" Property="WorkTime" Title="Work Time (Hours)" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </div>
</div>

@code {
    private List<WorkItemDetails> tasks = new List<WorkItemDetails>();
    private List<WorkItemDetails> filteredTasks = new List<WorkItemDetails>();
    private List<string> iterationPaths = new List<string>();
    private string personCriteria;
    private string projectCriteria;
    private string sprintCriteria;
    private TaskService taskService = new TaskService();
    private List<WorkTimeData> workTimeData = new List<WorkTimeData>();
    private RadzenDataGrid<WorkItemDetails> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = await taskService.GetTasksAsync();
            iterationPaths = tasks.Select(t => t.IterationPath).Distinct().ToList();
            FilterTasks();
            PrepareChartData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void FilterTasks()
    {
        filteredTasks = tasks.Where(t =>
            (string.IsNullOrEmpty(personCriteria) || (t.DisplayName != null && t.DisplayName.Contains(personCriteria, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(projectCriteria) || (t.AreaPath != null && t.AreaPath.Contains(projectCriteria, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(sprintCriteria) || (t.IterationPath != null && t.IterationPath.Equals(sprintCriteria, StringComparison.OrdinalIgnoreCase))) &&
            (t.BoardColumn == "Resolved" || t.BoardColumn == "Closed")
        ).ToList();
        PrepareChartData(); // Aktualizujemy dane wykresu po filtracji
    }

    private void PrepareChartData()
    {
        workTimeData = filteredTasks
            .GroupBy(t => t.IterationPath)
            .Select(g => new WorkTimeData
                {
                    IterationPath = g.Key,
                    TotalWorkTime = g.Sum(t => t.WorkTime ?? 0)
                }).ToList();
    }

    private void CheckEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterTasks();
        }
    }

    private void HandleSprintChange(ChangeEventArgs e)
    {
        sprintCriteria = e.Value.ToString();
        FilterTasks();
    }

    private void OnRowSelect(WorkItemDetails task)
    {
        Console.WriteLine($"Selected Task ID: {task.Id}");
    }

    [CascadingParameter]
    public bool CollapseNavMenu { get; set; }

    private string GetMainContentCssClass()
    {
        return CollapseNavMenu ? "main-collapsed" : "main-expanded";
    }

    private class WorkTimeData
    {
        public string IterationPath { get; set; }
        public decimal TotalWorkTime { get; set; }
    }
}
